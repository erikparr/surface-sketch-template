LIVE UPDATE APPLIED: layer2 during playback
Starting ccEnvelope2 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Layer layer2: 3 notes using timing data, total: 4.0 seconds
LIVE UPDATE APPLIED: layer3 during playback
Starting ccEnvelope3 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Layer layer3: 2 notes using timing data, total: 4.0 seconds
LIVE UPDATE APPLIED: layer1 during playback
Starting ccEnvelope1 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Layer layer1: 5 notes using timing data, total: 4.0 seconds
DEBUG: After play - isRunning: true
Loop 2: Using fixed duration: 4.0 seconds
Using timing data for 3 notes: start times = [0.0, 1.538, 3.077]
Using timing data for 2 notes: start times = [0.0, 2.857]
Using timing data for 5 notes: start times = [0.0, 0.816, 1.633, 2.449, 3.265]
=== Starting dependent layers (loop 2) ===
Parent group: 1260, Duration: 4.0 seconds
[Layer layer1] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer2] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer3] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
Reusing 3 existing layer ProcMods
Starting ccEnvelope2 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope3 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope1 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
ERROR: Message 'wait' not understood.
Perhaps you misspelled 'at', or meant to call 'wait' on another receiver?
RECEIVER:
Instance of Array {    (0x7ff00e4874a8, gc=28, fmt=01, flg=00, set=02)
  indexed slots [2]
      0 : Float 0.000000   00000000 00000000
      1 : Float 11.428571   B6DB6DB7 4026DB6D
}
ARGS:
KEYWORD ARGUMENTS:

PROTECTED CALL STACK:
	Meta_MethodError:new	0x7ff050aaefc0
		arg this = DoesNotUnderstandError
		arg what = nil
		arg receiver = [0.0, 11.428571428571]
	Meta_DoesNotUnderstandError:new	0x7ff050ab1780
		arg this = DoesNotUnderstandError
		arg receiver = [0.0, 11.428571428571]
		arg selector = wait
		arg args = []
		arg keywordArgumentPairs = []
	Object:doesNotUnderstand	0x7ff05016d880
		arg this = [0.0, 11.428571428571]
		arg selector = wait
		arg args = nil
		arg kwargs = nil
	a FunctionDef	0x7ff0102f8058
		sourceCode = "<an open Function>"
		var waitTime = [0.0, 11.428571428571]
	True:if	0x7ff0507516c0
		arg this = true
		arg trueFunc = a Function
		arg falseFunc = a Function
	a FunctionDef	0x7ff051eeadc0
		sourceCode = "<an open Function>"
		arg key = startTimes
		arg value = [0.0, 2.8571428571429]
		arg i = 1
	Dictionary:keysValuesArrayDo	0x7ff051ef6f80
		arg this = ('noteCount': 2, 'startTimes': [0.0, 2.8571428571429], 'melodyKey': live_layer3, 'waitTimes': [0.0, 2.8571428571429], 
  'ccSynth': Synth('ccEnvelope3' : 1269), 'noteInterval': 2.0, 'hasTiming': true, 'duration': 4.0, 'durations': [0.5, 0.5])
		arg argArray = [noteCount, 2, startTimes, [0.0, 2.8571428571429], melodyKey, live_layer3, waitTimes, [0.0, 2.8571428571429], nil, nil, nil, nil, ccSynth, Synth('ccEnvelope3' : 1269), noteInterval, 2.0, nil, nil, hasTiming, true, nil, nil, nil, nil, nil, nil, duration, 4.0, durations, [0.5, 0.5], nil, nil]
		arg function = a Function
		var i = 2
		var j = 2
		var key = nil
		var val = nil
		var arraySize = nil
	Dictionary:keysValuesDo	0x7ff051ee9d40
		arg this = ('noteCount': 2, 'startTimes': [0.0, 2.8571428571429], 'melodyKey': live_layer3, 'waitTimes': [0.0, 2.8571428571429], 
  'ccSynth': Synth('ccEnvelope3' : 1269), 'noteInterval': 2.0, 'hasTiming': true, 'duration': 4.0, 'durations': [0.5, 0.5])
		arg function = a Function
	Dictionary:do	0x7ff051eeaa00
		arg this = ('noteCount': 2, 'startTimes': [0.0, 2.8571428571429], 'melodyKey': live_layer3, 'waitTimes': [0.0, 2.8571428571429], 
  'ccSynth': Synth('ccEnvelope3' : 1269), 'noteInterval': 2.0, 'hasTiming': true, 'duration': 4.0, 'durations': [0.5, 0.5])
		arg function = a Function
	a FunctionDef	0x7ff0102f8ee8
		sourceCode = "<an open Function>"
	True:if	0x7ff0507516c0
		arg this = true
		arg trueFunc = a Function
		arg falseFunc = a Function
	a FunctionDef	0x7ff0102f9578
		sourceCode = "<an open Function>"
		var melodyData = ('name': Live Melody, 'timing': [0.0, 0.71428571428571, 0.28571428571429], 'noteDurations': [0.5, 0.5], 'patterns': [[90, 90]], 
  'velocities': [127, 63], 'durationType': absolute, 'metadata': ('totalDuration': 1.0, 'scale': phrygian, 'key': F, 'durationType': absolute))
		var pattern = [90, 90]
		var noteCount = 2
		var noteInterval = 2.0
		var parentDuration = 4.0
		var currentTiming = ('noteCount': 2, 'startTimes': [0.0, 2.8571428571429], 'melodyKey': live_layer3, 'waitTimes': [0.0, 2.8571428571429], 
  'ccSynth': Synth('ccEnvelope3' : 1269), 'noteInterval': 2.0, 'hasTiming': true, 'duration': 4.0, 'durations': [0.5, 0.5])
		var velocities = [127, 63]
		var noteDurations = [0.5, 0.5]
		var timing = ('noteCount': 2, 'startTimes': [0.0, 2.8571428571429], 'melodyKey': live_layer3, 'waitTimes': [0.0, 2.8571428571429], 
  'ccSynth': Synth('ccEnvelope3' : 1269), 'noteInterval': 2.0, 'hasTiming': true, 'duration': 4.0, 'durations': [0.5, 0.5])
		var expressionSynth = Synth('ccEnvelope3' : 1272)
	Object:while	0x7ff0501affc0
		arg this = a Function
		arg body = a Function
	a FunctionDef	0x7ff0516018c0
		sourceCode = "<an open Function>"
	Function:prTry	0x7ff050e08fc0
		arg this = a Function
		var result = nil
		var thread = a Routine
		var next = nil
		var wasInProtectedFunc = true
	
CALL STACK:
	DoesNotUnderstandError:reportError
		arg this = <instance of DoesNotUnderstandError>
	Nil:handleError
		arg this = nil
		arg error = <instance of DoesNotUnderstandError>
	Thread:handleError
		arg this = <instance of Thread>
		arg error = <instance of DoesNotUnderstandError>
	Thread:handleError
		arg this = <instance of Routine>
		arg error = <instance of DoesNotUnderstandError>
	Object:throw
		arg this = <instance of DoesNotUnderstandError>
	Function:protect
		arg this = <instance of Function>
		arg handler = <instance of Function>
		var result = <instance of DoesNotUnderstandError>
	Routine:prStart
		arg this = <instance of Routine>
		arg inval = 0.0
^^ ERROR: Message 'wait' not understood.
Perhaps you misspelled 'at', or meant to call 'wait' on another receiver?
RECEIVER: [0.0, 11.428571428571]


Loop 3: Using fixed duration: 4.0 seconds
Using timing data for 3 notes: start times = [0.0, 1.538, 3.077]
Using timing data for 2 notes: start times = [0.0, 2.857]
Using timing data for 5 notes: start times = [0.0, 0.816, 1.633, 2.449, 3.265]
=== Starting dependent layers (loop 3) ===
Parent group: 1260, Duration: 4.0 seconds
[Layer layer1] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer2] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer3] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
Reusing 3 existing layer ProcMods
Starting ccEnvelope2 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope3 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope1 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
ERROR: Message 'wait' not understood.
Perhaps you misspelled 'at', or meant to call 'wait' on another receiver?
RECEIVER:
Instance of Array {    (0x7fefc0cec488, gc=2C, fmt=01, flg=00, set=02)
  indexed slots [3]
      0 : Float 0.000000   00000000 00000000
      1 : Float 6.153846   D89D89D8 40189D89
      2 : Float 12.307692   D89D89D8 40289D89
}
ARGS:
KEYWORD ARGUMENTS:
CALL STACK:
	DoesNotUnderstandError:reportError
		arg this = <instance of DoesNotUnderstandError>
	Nil:handleError
		arg this = nil
		arg error = <instance of DoesNotUnderstandError>
	Thread:handleError
		arg this = <instance of Thread>
		arg error = <instance of DoesNotUnderstandError>
	Thread:handleError
		arg this = <instance of Routine>
		arg error = <instance of DoesNotUnderstandError>
	Object:throw
		arg this = <instance of DoesNotUnderstandError>
	Function:protect
		arg this = <instance of Function>
		arg handler = <instance of Function>
		var result = <instance of DoesNotUnderstandError>
	Routine:prStart
		arg this = <instance of Routine>
		arg inval = 0.0
^^ ERROR: Message 'wait' not understood.
Perhaps you misspelled 'at', or meant to call 'wait' on another receiver?
RECEIVER: [0.0, 6.1538461538462, 12.307692307692]


Loop 4: Using fixed duration: 4.0 seconds
Using timing data for 3 notes: start times = [0.0, 1.538, 3.077]
Using timing data for 2 notes: start times = [0.0, 2.857]
Using timing data for 5 notes: start times = [0.0, 0.816, 1.633, 2.449, 3.265]
=== Starting dependent layers (loop 4) ===
Parent group: 1260, Duration: 4.0 seconds
[Layer layer1] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer2] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer3] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
Reusing 3 existing layer ProcMods
Starting ccEnvelope2 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope3 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope1 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Loop 5: Using fixed duration: 4.0 seconds
Using timing data for 3 notes: start times = [0.0, 1.538, 3.077]
Using timing data for 2 notes: start times = [0.0, 2.857]
Using timing data for 5 notes: start times = [0.0, 0.816, 1.633, 2.449, 3.265]
=== Starting dependent layers (loop 5) ===
Parent group: 1260, Duration: 4.0 seconds
[Layer layer1] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer2] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
[Layer layer3] Knob values - Pos 4: 0.5 (DurScale: 0.55), Pos 5: 0.5 (Min: 63), Pos 6: 0.5 (Max: 64)
Reusing 3 existing layer ProcMods
Starting ccEnvelope2 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope3 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Starting ccEnvelope1 envelope - Duration: 2.2s, Attack: 1.1s, Release: 1.1s
Stopping all layers...
nil
Parent ProcMod releasing...
Releasing child ProcMod: layer2_250720_122836
nil
Releasing layer layer2 ProcMod...
Releasing child ProcMod: layer3_250720_122836
nil
Releasing layer layer3 ProcMod...
Releasing child ProcMod: layer1_250720_122836
nil
Releasing layer layer1 ProcMod...
All layers stopped
Layer layer2 ProcMod released
Layer layer1 ProcMod released
Layer layer3 ProcMod released
Parent ProcMod released
